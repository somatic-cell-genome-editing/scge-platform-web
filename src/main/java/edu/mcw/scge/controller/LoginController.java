package edu.mcw.scge.controller;


import edu.mcw.scge.configuration.Access;
import edu.mcw.scge.dao.implementation.PersonDao;
import edu.mcw.scge.dao.implementation.ctd.SectionDAO;
import edu.mcw.scge.datamodel.Application;
import edu.mcw.scge.datamodel.Person;


import edu.mcw.scge.datamodel.PersonInfo;
import edu.mcw.scge.datamodel.ctd.Section;
import edu.mcw.scge.uploadFiles.DBService;
import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;


import java.util.*;


/**
 * Created by jthota on 8/9/2019.
 */
@Controller

public class LoginController{
    PersonDao pdao=new PersonDao();
    Access access=new Access();
    DBService dbService=new DBService();
    @RequestMapping("/home")
    public String getHomePage(OAuth2AuthenticationToken authentication, HttpServletRequest req) throws Exception {

        req.setAttribute("seoDescription","Database of study and experiment data generated by the Somatic Cell Genome Editing Consortium");
        req.setAttribute("seoTitle","Home");
        req.setAttribute("page", "/WEB-INF/jsp/home");
        return "base";
    }

    @RequestMapping("/dashboard")
    public String verifyAuthentication(OAuth2AuthenticationToken authentication, HttpServletRequest req) throws Exception {
        Map userAttributes=getUserAttributes(authentication);

        if(userAttributes!=null) {
            boolean userExists = access.verifyUserExists(userAttributes.get("sub").toString(), userAttributes.get("email").toString());
            if (userExists) {
                List<Person> personList = pdao.getPersonByEmail(userAttributes.get("email").toString());
                Person p=personList.get(0);
                if (p.getStatus().equalsIgnoreCase("active")) {
                    HttpSession session = req.getSession(true);
                    session.setAttribute("userAttributes", userAttributes);
                    session.setAttribute("personId", p.getId());
                  //  session.setAttribute("personInfoList", getPerson(userAttributes));
                    req.setAttribute("personInfoList", access.getPersonInfoRecords(userAttributes));
                    req.setAttribute("applicationsMap",dbService.getApplicationsByUserId(p.getId()) );
                    req.setAttribute("modules", getCTDModules());
                    System.out.println("USER_LOGIN_SUCCESS " + userAttributes.get("email").toString()+ " " +  new Date().toString());
                    req.setAttribute("page", "/WEB-INF/jsp/login/home");
                    return "base";

                }
            } else {
                System.out.println("USER_LOGIN_FAILED " + userAttributes.get("email").toString() + " " +  new Date().toString());
                req.setAttribute("msg", "Please contact SCGE admin and register your google id");
                return "redirect:/loginFailure";
            }
        }
            return "redirect:/loginFailure";

    }


    @RequestMapping("/loginFailure")
    public String getFailureMessage(HttpServletRequest req){
       String msg="Please contact admin at ";
       req.setAttribute("msg",msg);
        return "loginFailure" ;
    }
 public Map getUserAttributes(OAuth2AuthenticationToken authentication){
     if(authentication!=null) {
       return   authentication.getPrincipal().getAttributes();
     }
     return null;
 }
    public  Map<Integer, List<Section>> getCTDModules() throws Exception {
        SectionDAO sectionDAO=new SectionDAO();
        Map<Integer, List<Section>> modules=new HashMap<>();
        for(int module: Arrays.asList(1,2,3,4,5)) {
            List<Section> sections = sectionDAO.getTopLevelSectionsOfModule(module);
            modules.put(module, sections);
        }
        return modules;
    }
}
